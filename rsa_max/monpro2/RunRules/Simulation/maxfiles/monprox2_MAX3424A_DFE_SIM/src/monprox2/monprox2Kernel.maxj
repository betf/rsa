package monprox2;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class monprox2Kernel extends Kernel {

	private static final DFEType type = dfeInt(32);

	protected monprox2Kernel(KernelParameters parameters) {
		super(parameters);

	Integer w = 32;
		//unsigned int s=32;

		// Input
		DFEVar a1 = io.scalarInput("a1" , dfeUInt(w));
		DFEVar a2 = io.scalarInput("a2" , dfeUInt(w));
		DFEVar b1 = io.input("b1", dfeUInt(w));
		DFEVar b2 = io.input("b2", dfeUInt(w));

		// Create a simple counter and add its count to the input
		//HWVar count = control.count.simpleCounter(w);


		// Generate hw for array 1
		DFEVar x1;
		DFEVar y1;
		DFEVar pp1_1, pp2_1, pp3_1, pp4_1;
		DFEVar pp5_1, pp6_1, pp7_1;

		pp1_1 = ((a1 << 16) >> 16) * ((b1 << 16) >> 16);
		pp2_1 = ((a1 << 16) >> 16) *(b1 >> 16);
		pp3_1 = (a1 >> 16) * ((b1 << 16) >> 16);
		pp4_1 = (a1 >> 16) * (b1 >> 16);

		pp5_1 = pp2_1 + pp3_1;
		pp6_1=(pp5_1 < pp3_1)?(pp4_1+(1 << 16)):pp4_1;

		x1 = (pp5_1 << 16) + pp1_1;
		pp7_1 = (x1 < pp1_1) ? (pp6_1+1) : (pp6_1+0);

		y1 = (pp5_1 >> 16) + pp7_1;

		// Generate hw for array 2
		DFEVar x2;
		DFEVar y2;
		DFEVar pp1_2, pp2_2, pp3_2, pp4_2;
		DFEVar pp5_2, pp6_2, pp7_2;

		pp1_2 = ((a2 << 16) >> 16) * ((b2 << 16) >> 16);
		pp2_2 = ((a2 << 16) >> 16) *(b2 >> 16);
		pp3_2 = (a2 >> 16) * ((b2 << 16) >> 16);
		pp4_2 = (a2 >> 16) * (b2 >> 16);

		pp5_2 = pp2_2 + pp3_2;
		pp6_2=(pp5_2 < pp3_2)?(pp4_2+(1 << 16)):pp4_2;

		x2 = (pp5_2 << 16) + pp1_2;
		pp7_2 = (x2 < pp1_2) ? (pp6_2+1) : (pp6_2+0);

		y2 = (pp5_2 >> 16) + pp7_2;


		// Output
		io.output("x1", x1, dfeUInt(w));
		io.output("y1", y1, dfeUInt(w));
		io.output("x2", x2, dfeUInt(w));
		io.output("y2", y2, dfeUInt(w));



///////////////////////////////////////////////////*************** end of my kernel  *********************////////////////////////////////////////////
	}

}
